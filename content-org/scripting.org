#+HUGO_BASE_DIR: ../
#+HUGO_WEIGHT: auto
#+HUGO_SECTION: scripting
#+HUGO_PAIRED_SHORTCODES: katex
#+OPTIONS: ^:{}
#+PROPERTY: header-args:jupyter-julia :session jl :exports both :eval no-export :async yes

* Scripting
:PROPERTIES:
:EXPORT_HUGO_WEIGHT: 200
:EXPORT_FILE_NAME: _index
:END:

* Text Editor
:PROPERTIES:
:EXPORT_FILE_NAME: text-editor
:END:

The REPL is great for typing code interactively, but not for saving code for future use. In order to save your code, you need to save it to a file. Any text editor will do, but some have features specifically for programming.

For example, many text editors have /syntax highlighting/. This means that they highlight different characters based on their meaning in the code.

#+begin_src text
function f(x)
    return x^2 - sqrt(x) + cos(x / 5)
end
#+end_src

#+begin_src julia :exports code :results none
function f(x)
    return x^2 - sqrt(x) + cos(x / 5)
end
#+end_src

** VS Code

You can [[https://code.visualstudio.com/download][download VSCode here]].

#+html: <img src="/vsc-images/vsc-startup-screen.png" alt="VSCode Startup Screen">


#+html: <img src="/vsc-images/vsc-julia-ext.png" alt="VSCode Julia Extension">
#+html: <img src="/vsc-images/vsc-open-folder.png" alt="VSCode Open Folder">
#+html: <img src="/vsc-images/vsc-workspace-trust.png" alt="VSCode Workspace Trust">
#+html: <img src="/vsc-images/vsc-new-julia-file.png" alt="VSCode New Julia File">
#+html: <img src="/vsc-images/vsc-start-julia-repl.png" alt="VSCode Start Julia REPL">
#+html: <img src="/vsc-images/vsc-create-terminal.png" alt="VSCode Create Terminal">

#+hugo: {{< hint type=note >}}
Although VSCode is open source, the downloadable product contains telemetry/tracking. If you wish to opt out of this tracking, take a look at [[https://vscodium.com/#intro][VSCodium]].
#+hugo: {{< /hint >}}

* Scripts
:PROPERTIES:
:EXPORT_FILE_NAME: scripts
:END:

** Script Structure

A Julia script is simply a file with Julia code. When you run a script, the result is similar to running each line of code in the REPL from top to bottom. For example, consider the following script:

#+begin_src julia :results none :exports code
x = 2 + 2
y = 5x - 3
x * y
#+end_src

Running this script would be similar to the following REPL commands:

#+BEGIN_EXPORT html
<pre class="julia-repl"><font color="#98C379"><b>julia&gt; </b></font>x = 2 + 2
4

<font color="#98C379"><b>julia&gt; </b></font>y = 5x - 3
17

<font color="#98C379"><b>julia&gt; </b></font>x * y
68
</pre>
#+END_EXPORT

However, the results of each expression are not shown automatically like in the REPL.

** First Script

Often the first program people learn to write is the [[https://en.wikipedia.org/wiki/%22Hello,_World!%22_program]["Hello, World!"]] program. All it does is print =Hello, World!= to the screen. Open a file named =hello.jl= and write the following line of code:

#+begin_src julia :results output :exports code
println("Hello, World!")
#+end_src

There are a few ways to actually run this script now. First, open a terminal in the same directory as =hello.jl=. Then, type ~julia hello.jl~ and press enter. You should see the following output:

#+begin_src txt
$ julia hello.jl
Hello, World!
#+end_src

You can execute a script from inside the REPL as well. Open the REPL with the ~julia~ command and type ~include("hello.jl")~:

#+BEGIN_EXPORT html
<pre class="julia-repl"><font color="#98C379"><b>julia&gt; </b></font>include(&quot;hello.jl&quot;)
Hello, World!
</pre>
#+END_EXPORT

The ~include~ function executes a Julia file's contents as if they were typed in the REPL.

* Jupyter Notebooks
:PROPERTIES:
:EXPORT_FILE_NAME: jupyter
:END:

* Scripting Workflow
:PROPERTIES:
:EXPORT_FILE_NAME: scripting-workflow
:END:

The following steps are often useful for working on code:

1. Write some code
2. Test the code interactively
3. Repeat

** Script + REPL

For example, say you're working on some code in a file named =work.jl=

#+begin_src julia :exports code :results none
# work.jl

function foo(a, b, c)
    # lots of code
end

function bar(x, y)
    # lots of code
end
#+end_src

Now, you can start up a REPL and ~include~ the =work.jl= file.

#+BEGIN_EXPORT html
<pre class="julia-repl"><font color="#98C379"><b>julia&gt; </b></font>include("work.jl")
</pre>
#+END_EXPORT

You can now test the ~foo~ and ~bar~ functions in the REPL.

#+BEGIN_EXPORT html
<pre class="julia-repl"><font color="#98C379"><b>julia&gt; </b></font>foo(1, 2, 3)

<font color="#98C379"><b>julia&gt; </b></font>bar(64, 128)

</pre>
#+END_EXPORT

** Jupyter Notebook

Since a text editor is integrated into a jupyter notebook, you can skip the ~include~ step and write your code directly into a cell. Note that you cannot include jupyter notebooks from other files. If you want to use your code elsewhere, you'll have to put it in a Julia file.
* Scripting Tools
:PROPERTIES:
:EXPORT_FILE_NAME: scripting-tools
:END:
** Comments
You can prevent part of your code from being executed by putting it after a =#=. This is called a "comment".

#+begin_src julia :exports code
# this line is ignored
x = 1 # this text is ignored
#+end_src

You can comment multiple lines by starting them with =#== and ending them with ==#=.

#+begin_src julia :exports code
x = 1 # this line will run

#=
these lines will not run:
y = 2
z = 3
=#
#+end_src

Comments are also useful for annotating. When your code gets larger and more complicated, it becomes difficult to remember what it does and how it works. Adding comments helps you remember what your code does.

** Displaying Output
*** Terminal Output

When you run Julia in the terminal, results can be showed to the /standard output stream/. You can think of this stream as someone typing on a keyboard. You can instruct this figurative keyboard to type anything you want with Julia.

In the following sections, =‸= will represent the current position of the caret. For example, the result of typing "hello", the enter key, and "world" would look like:

#+begin_src text
hello
world‸
#+end_src

*** Printing

**** Print Line

The ~println~ (short for /print line/) function takes any amount of arguments, prints them one by one, then advances to the next output line (like pressing enter on the keyboard).

#+begin_src julia
println("hello")

x = 19
y = 5
println("The value of x is ", x)
println("x + y = ", x + y)
#+end_src

After the first ~println~ function runs, the terminal output will look like:

#+begin_src text
hello
‸
#+end_src

Notice the cursor is on the next line. After the next two print statements the total output will be:

#+begin_src text
hello123
The value of x is 19
x + y = 24
‸
#+end_src

**** Print

The ~print~ function does the same thing as ~println~ without advancing to the next output line. A simple example:

#+begin_src julia
print("hello ")
print("world")
#+end_src

After the first ~print~ runs, the output will look like:

#+begin_src text
hello ‸
#+end_src

After the next ~print~, the output will be

#+begin_src text
hello world‸
#+end_src

Notice that the cursor is still on the same line. If you try to print something else, it will all be on the same line:

#+begin_src julia
print("hello ")
print("world")
println("what's up")
#+end_src

#+begin_src text
hello worldwhat's up
‸
#+end_src

There are a couple ways to fix this issue. Firstly, you could call ~println()~. Since there are no arguments, it simply advances to the next line:

#+begin_src jupyter-julia
print("hello ")
print("world")
println()  # advances to next line of output
println("what's up")
#+end_src

#+begin_src text
hello world
what's up
‸
#+end_src

Many programming languages have special characters that mimic things like enter and tab on the keyboard. To mimic the enter key, type the two characters =\n= inside a string. The =n= stands for /new line/.

#+begin_src jupyter-julia
print("hello ")
print("world\n")  # add \n to mimic the enter key
println("what's up")
#+end_src

#+begin_src text
hello world
what's up
‸
#+end_src

* REPL Tools
:PROPERTIES:
:EXPORT_FILE_NAME: repl-tools
:END:

** Getting Help

If you're ever unsure what an operator (like =+=), function (like =abs=), or variable (like =pi=) does, you can use the REPL's built-in help system. Start on a blank prompt and type a single =?= character:

#+BEGIN_EXPORT html
<pre class="julia-repl"><font color="#98C379"><b>julia&gt; </b></font>?</pre>
#+END_EXPORT

This will automatically bring up the =help?>= prompt:

#+BEGIN_EXPORT html
<pre class="julia-repl"><font color="#D19A66"><b>help?&gt; </b></font></pre>
#+END_EXPORT

Now type the name of the item you're curious about and press enter. We'll start with the =+= operator:

#+BEGIN_EXPORT html
<pre class="julia-repl"><font color="#D19A66"><b>help?&gt; </b></font>+
search: <b>+</b>

<font color="#56B6C2">  +(x, y...)</font>

  Addition operator. <font color="#56B6C2">x+y+z+...</font> calls this function with all arguments, i.e.
  <font color="#56B6C2">+(x, y, z, ...)</font>.

<b>  Examples</b>
<b>  ≡≡≡≡≡≡≡≡≡≡</b>

<font color="#56B6C2">  julia&gt; 1 + 20 + 4</font>
<font color="#56B6C2">  25</font>
<font color="#56B6C2">  </font>
<font color="#56B6C2">  julia&gt; +(1, 20, 4)</font>
<font color="#56B6C2">  25</font>

  ────────────────────────────────────────────────────────────────────────────

<font color="#56B6C2">  dt::Date + t::Time -&gt; DateTime</font>

  The addition of a <font color="#56B6C2">Date</font> with a <font color="#56B6C2">Time</font> produces a <font color="#56B6C2">DateTime</font>. The hour, minute,
  second, and millisecond parts of the <font color="#56B6C2">Time</font> are used along with the year,
  month, and day of the <font color="#56B6C2">Date</font> to create the new <font color="#56B6C2">DateTime</font>. Non-zero microseconds
  or nanoseconds in the <font color="#56B6C2">Time</font> type will result in an <font color="#56B6C2">InexactError</font> being thrown.</pre>
#+END_EXPORT

The examples section is very useful to learn the usage at a glance. The second example actually shows a feature of ~+~ that you probably haven't used in this course before: it also acts like a function. ~a + b~ is the same as ~+(a, b)~.

The second help section that involves =Date= and =Time= is less useful to you right now. All that's important to know right now is that the section is there because ~+~ has a special definition for dates and times.

Now, let's look at the help output for the ~abs~ function.

#+BEGIN_EXPORT html
<pre class="julia-repl"><font color="#D19A66"><b>help?&gt; </b></font>abs
search: <b>abs</b> <b>abs</b>2 <b>abs</b>path <b>abs</b>tract <b>Abs</b>tractSet &apos;<b>abs</b>tract type&apos; <b>Abs</b>tractChar

<font color="#56B6C2">  abs(x)</font>

  The absolute value of <font color="#56B6C2">x</font>.

  When <font color="#56B6C2">abs</font> is applied to signed integers, overflow may occur, resulting in the
  return of a negative value. This overflow occurs only when <font color="#56B6C2">abs</font> is applied to
  the minimum representable value of a signed integer. That is, when <font color="#56B6C2">x ==</font>
<font color="#56B6C2">  typemin(typeof(x))</font>, <font color="#56B6C2">abs(x) == x &lt; 0</font>, not <font color="#56B6C2">-x</font> as might be expected.

  See also: <font color="#56B6C2">abs2</font>, <font color="#56B6C2">unsigned</font>, <font color="#56B6C2">sign</font>.

<b>  Examples</b>
<b>  ≡≡≡≡≡≡≡≡≡≡</b>

<font color="#56B6C2">  julia&gt; abs(-3)</font>
<font color="#56B6C2">  3</font>
<font color="#56B6C2">  </font>
<font color="#56B6C2">  julia&gt; abs(1 + im)</font>
<font color="#56B6C2">  1.4142135623730951</font>
<font color="#56B6C2">  </font>
<font color="#56B6C2">  julia&gt; abs(typemin(Int64))</font>
<font color="#56B6C2">  -9223372036854775808</font>
</pre>
#+END_EXPORT

If you weren't sure before, the first line of the help output tells you that ~abs(x)~ is the absolute value of ~x~. There is an additional paragraph that explains some subtleties but you don't need to worry about those right now.

Finally, let's look at the help output for the variable =pi=.

#+BEGIN_EXPORT html
<pre class="julia-repl"><font color="#D19A66"><b>help?&gt; </b></font>pi
search: <b>pi</b> <b>Pi</b>pe <b>pi</b>peline <b>Pi</b>peBuffer sin<b>pi</b> cos<b>pi</b> cis<b>pi</b> get<b>pi</b>d rem2<b>pi</b> mod2<b>pi</b> <b>p</b>r<b>i</b>nt

<font color="#56B6C2">  π</font>
<font color="#56B6C2">  pi</font>

  The constant pi.

  Unicode <font color="#56B6C2">π</font> can be typed by writing <font color="#56B6C2">\pi</font> then pressing tab in the Julia REPL,
  and in many editors.

  See also: <font color="#56B6C2">sinpi</font>, <font color="#56B6C2">sincospi</font>, <font color="#56B6C2">deg2rad</font>.

<b>  Examples</b>
<b>  ≡≡≡≡≡≡≡≡≡≡</b>

<font color="#56B6C2">  julia&gt; pi</font>
<font color="#56B6C2">  π = 3.1415926535897...</font>
<font color="#56B6C2">  </font>
<font color="#56B6C2">  julia&gt; 1/2pi</font>
<font color="#56B6C2">  0.15915494309189535</font>
</pre>
#+END_EXPORT

Again, there is a brief description at the start and some examples at the bottom.

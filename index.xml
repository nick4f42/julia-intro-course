<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning Julia</title><link>https://nick4f42.github.io/</link><description>Recent content on Learning Julia</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://nick4f42.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Arithmetic</title><link>https://nick4f42.github.io/calculations/arithmetic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/calculations/arithmetic/</guid><description>Using Julia as a Calculator Julia supports all of the arithmetic operators you would expect to find on a calculator:
addition: + subtraction: - multiplication: * division: / exponentiation: ^ Go ahead and try using these operators in the REPL. The result of these calculations is displayed on the next line.
julia&amp;gt; 2 + 2 4 julia&amp;gt; 5 - 3 2 julia&amp;gt; 5 * 6 30 julia&amp;gt; 5 / 2 2.</description></item><item><title>Setup</title><link>https://nick4f42.github.io/getting-started/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/getting-started/setup/</guid><description>You can download Julia at https://julialang.org/downloads/. For specific instructions, see https://julialang.org/downloads/platform/.
Once installed, open a command line, type julia, and press enter. You should see something similar to the following output:
$ julia _ _ _ _(_)_ | Documentation: https://docs.julialang.org (_) | (_) (_) | _ _ _| |_ __ _ | Type &amp;quot;?&amp;quot; for help, &amp;quot;]?&amp;quot; for Pkg help. | | | | | | |/ _` | | | | |_| | | | (_| | | Version 1.</description></item><item><title>Text Editor</title><link>https://nick4f42.github.io/scripting/text-editor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/scripting/text-editor/</guid><description>The REPL is great for typing code interactively, but not for saving code for future use. In order to save your code, you need to save it to a file. Any text editor will do, but some have features specifically for programming.
For example, many text editors have syntax highlighting. This means that they highlight different characters based on their meaning in the code.
function f(x) return x^2 - sqrt(x) + cos(x / 5) end function f(x) return x^2 - sqrt(x) + cos(x / 5) end VS Code You can download VSCode here.</description></item><item><title>Julia Intro</title><link>https://nick4f42.github.io/getting-started/julia-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/getting-started/julia-intro/</guid><description>Programming Computers only understand ones and zeros. When a computer runs a program, it&amp;rsquo;s really reading something like this:
01111111 01000101 01001100 01000110 00000010 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 Computers understand this just fine. Humans, on the other hand, have a difficult time writing and understanding instructions like these.
In order to make writing this easier, programming languages were invented. Humans write code in a programming language, and that code is translated into ones and zeros that the computer can run.</description></item><item><title>Scripts</title><link>https://nick4f42.github.io/scripting/scripts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/scripting/scripts/</guid><description>Script Structure A Julia script is simply a file with Julia code. When you run a script, the result is similar to running each line of code in the REPL from top to bottom. For example, consider the following script:
x = 2 + 2 y = 5x - 3 x * y Running this script would be similar to the following REPL commands:
julia&amp;gt; x = 2 + 2 4 julia&amp;gt; y = 5x - 3 17 julia&amp;gt; x * y 68 However, the results of each expression are not shown automatically like in the REPL.</description></item><item><title>Variables</title><link>https://nick4f42.github.io/calculations/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/calculations/variables/</guid><description>Assigning Variables Often times you want to store the results of calculations for later use. Instead of writing down numbers and typing them out again, you can assign a variable with = (the assignment operator).
julia&amp;gt; x = sqrt(2) 1.4142135623730951 Now, you can use x in place of 1.4142135623730951 in your future calculations.
julia&amp;gt; x + 1 2.414213562373095 You can also reassign x to another value if you change your mind:</description></item><item><title>Functions</title><link>https://nick4f42.github.io/calculations/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/calculations/functions/</guid><description>Assignment-Style Functions In the same sense that variables can help you use the same value multiple times, functions can help you use the same expression multiple times. Say you&amp;rsquo;re working with the following quadratic polynomial:
\[f(x) = 3x^2 - 5x &amp;#43; 6\] The = operator can assign an expression to a function. In this case, we want f(x) to represent the expression 3x^2 - 5x + 6:
julia&amp;gt; f(x) = 3x^2 - 5x + 6 f (generic function with 1 method) The x inside this function is not accessible from outside.</description></item><item><title>Jupyter Notebooks</title><link>https://nick4f42.github.io/scripting/jupyter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/scripting/jupyter/</guid><description/></item><item><title>REPL Intro</title><link>https://nick4f42.github.io/getting-started/repl-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/getting-started/repl-intro/</guid><description>When you type julia in the command line, you should get an output like this:
$ julia _ _ _ _(_)_ | Documentation: https://docs.julialang.org (_) | (_) (_) | _ _ _| |_ __ _ | Type &amp;quot;?&amp;quot; for help, &amp;quot;]?&amp;quot; for Pkg help. | | | | | | |/ _` | | | | |_| | | | (_| | | Version 1.7.3 (2022-05-06) _/ |\__&amp;apos;_|_|_|\__&amp;apos;_| | Official https://julialang.</description></item><item><title>Errors</title><link>https://nick4f42.github.io/calculations/errors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/calculations/errors/</guid><description>When Julia cannot understand or run a command, you will get an error. Being a good programmer is more about knowing how to interpret errors than never getting them. Let&amp;rsquo;s go through a couple basic errors you might get when typing in the REPL.
Syntax Errors Extra Space Syntax errors occur when Julia can&amp;rsquo;t understand your code. You might get one if you accidentally type a space where you shouldn&amp;rsquo;t:</description></item><item><title>Scripting Workflow</title><link>https://nick4f42.github.io/scripting/scripting-workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/scripting/scripting-workflow/</guid><description>The following steps are often useful for working on code:
Write some code Test the code interactively Repeat Script + REPL For example, say you&amp;rsquo;re working on some code in a file named work.jl
# work.jl function foo(a, b, c) # lots of code end function bar(x, y) # lots of code end Now, you can start up a REPL and include the work.jl file.
julia&amp;gt; include("work.jl") You can now test the foo and bar functions in the REPL.</description></item><item><title>Patterns</title><link>https://nick4f42.github.io/calculations/patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/calculations/patterns/</guid><description>Assigning Variables Consider the following assignment:
julia&amp;gt; a = 4 4 The = operator can actually do bit more than assigning a value to a variable. You can actually thing of the left side as a pattern that is matching the right side.
A variable name is a pattern that matches anything, including tuples for example.
julia&amp;gt; b = (1, 2) (1, 2) julia&amp;gt; b (1, 2) What if we want to assign values in a tuple to separate variables?</description></item><item><title>Scripting Tools</title><link>https://nick4f42.github.io/scripting/scripting-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/scripting/scripting-tools/</guid><description>Comments You can prevent part of your code from being executed by putting it after a #. This is called a &amp;ldquo;comment&amp;rdquo;.
# this line is ignored x = 1 # this text is ignored You can comment multiple lines by starting them with #= and ending them with =#.
x = 1 # this line will run #= these lines will not run: y = 2 z = 3 =# Comments are also useful for annotating.</description></item><item><title>REPL Tools</title><link>https://nick4f42.github.io/scripting/repl-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nick4f42.github.io/scripting/repl-tools/</guid><description>Getting Help If you&amp;rsquo;re ever unsure what an operator (like +), function (like abs), or variable (like pi) does, you can use the REPL&amp;rsquo;s built-in help system. Start on a blank prompt and type a single ? character:
julia&amp;gt; ? This will automatically bring up the help?&amp;gt; prompt:
help?&amp;gt; Now type the name of the item you&amp;rsquo;re curious about and press enter. We&amp;rsquo;ll start with the + operator:
help?&amp;gt; + search: + +(x, y.</description></item></channel></rss>
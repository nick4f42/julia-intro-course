<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scripting on Learning Julia</title><link>https://github.com/nick4f42/julia-intro-course/scripting/</link><description>Recent content in Scripting on Learning Julia</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://github.com/nick4f42/julia-intro-course/scripting/index.xml" rel="self" type="application/rss+xml"/><item><title>Text Editor</title><link>https://github.com/nick4f42/julia-intro-course/scripting/text-editor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/nick4f42/julia-intro-course/scripting/text-editor/</guid><description>The REPL is great for typing code interactively, but not for saving code for future use. In order to save your code, you need to save it to a file. Any text editor will do, but some have features specifically for programming.
For example, many text editors have syntax highlighting. This means that they highlight different characters based on their meaning in the code.
function f(x) return x^2 - sqrt(x) + cos(x / 5) end function f(x) return x^2 - sqrt(x) + cos(x / 5) end VS Code You can download VSCode here.</description></item><item><title>Scripts</title><link>https://github.com/nick4f42/julia-intro-course/scripting/scripts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/nick4f42/julia-intro-course/scripting/scripts/</guid><description>Script Structure A Julia script is simply a file with Julia code. When you run a script, the result is similar to running each line of code in the REPL from top to bottom. For example, consider the following script:
x = 2 + 2 y = 5x - 3 x * y Running this script would be similar to the following REPL commands:
julia&amp;gt; x = 2 + 2 4 julia&amp;gt; y = 5x - 3 17 julia&amp;gt; x * y 68 However, the results of each expression are not shown automatically like in the REPL.</description></item><item><title>Jupyter Notebooks</title><link>https://github.com/nick4f42/julia-intro-course/scripting/jupyter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/nick4f42/julia-intro-course/scripting/jupyter/</guid><description/></item><item><title>Scripting Workflow</title><link>https://github.com/nick4f42/julia-intro-course/scripting/scripting-workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/nick4f42/julia-intro-course/scripting/scripting-workflow/</guid><description>The following steps are often useful for working on code:
Write some code Test the code interactively Repeat Script + REPL For example, say you&amp;rsquo;re working on some code in a file named work.jl
# work.jl function foo(a, b, c) # lots of code end function bar(x, y) # lots of code end Now, you can start up a REPL and include the work.jl file.
julia&amp;gt; include("work.jl") You can now test the foo and bar functions in the REPL.</description></item><item><title>Scripting Tools</title><link>https://github.com/nick4f42/julia-intro-course/scripting/scripting-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/nick4f42/julia-intro-course/scripting/scripting-tools/</guid><description>Comments You can prevent part of your code from being executed by putting it after a #. This is called a &amp;ldquo;comment&amp;rdquo;.
# this line is ignored x = 1 # this text is ignored You can comment multiple lines by starting them with #= and ending them with =#.
x = 1 # this line will run #= these lines will not run: y = 2 z = 3 =# Comments are also useful for annotating.</description></item><item><title>REPL Tools</title><link>https://github.com/nick4f42/julia-intro-course/scripting/repl-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/nick4f42/julia-intro-course/scripting/repl-tools/</guid><description>Getting Help If you&amp;rsquo;re ever unsure what an operator (like +), function (like abs), or variable (like pi) does, you can use the REPL&amp;rsquo;s built-in help system. Start on a blank prompt and type a single ? character:
julia&amp;gt; ? This will automatically bring up the help?&amp;gt; prompt:
help?&amp;gt; Now type the name of the item you&amp;rsquo;re curious about and press enter. We&amp;rsquo;ll start with the + operator:
help?&amp;gt; + search: + +(x, y.</description></item></channel></rss>